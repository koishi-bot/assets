import{_ as l,l as h,f as a,$ as s,m as e,w as n,a6 as i,S as r,a as p}from"./chunks/framework.Byih1hIo.js";const x=JSON.parse('{"title":"API","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/api.md","filePath":"zh-CN/api.md"}'),o={name:"zh-CN/api.md"},d=i('<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><h2 id="公开方法" tabindex="-1">公开方法 <a class="header-anchor" href="#公开方法" aria-label="Permalink to &quot;公开方法&quot;">​</a></h2><p>下面的公开方法可以直接通过 <code>ctx.assets</code> 使用。</p><h3 id="ctx-assets-transform" tabindex="-1">ctx.assets.transform(content) <a class="header-anchor" href="#ctx-assets-transform" aria-label="Permalink to &quot;ctx.assets.transform(content)&quot;">​</a></h3><ul><li><strong>content:</strong> <code>string</code> 要处理的消息文本</li><li>返回值: <code>Promise&lt;string&gt;</code> 处理后的消息文本</li></ul><p>将消息文本中的资源全部转存，并将链接替换为永久链接。</p>',6),k={id:"ctx-assets-stats",tabindex:"-1"},c=a("a",{class:"header-anchor",href:"#ctx-assets-stats","aria-label":'Permalink to "ctx.assets.stats() <badge type="warning">抽象</badge>"'},"​",-1),g=i(`<ul><li>返回值: <code>Promise&lt;Stats&gt;</code> 服务状态信息</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Stats</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">  assetCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">  assetSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><h2 id="内部方法" tabindex="-1">内部方法 <a class="header-anchor" href="#内部方法" aria-label="Permalink to &quot;内部方法&quot;">​</a></h2><p>要实现资源存储服务，你需要创建一个 Assets 的派生类。下面将介绍这个类的内部方法。</p><h3 id="assets-analyze" tabindex="-1">assets.analyze(url, file?) <a class="header-anchor" href="#assets-analyze" aria-label="Permalink to &quot;assets.analyze(url, file?)&quot;">​</a></h3><ul><li><strong>url:</strong> <code>string</code> 资源 URL</li><li><strong>file:</strong> <code>string</code> 资源文件名</li><li>返回值: <code>Promise&lt;FileInfo&gt;</code> 文件信息</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> FileInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">  filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">  hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;">  buffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Buffer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div>`,7),_={id:"assets-upload",tabindex:"-1"},C=a("a",{class:"header-anchor",href:"#assets-upload","aria-label":'Permalink to "assets.upload(url, file) <badge type="warning">抽象</badge>"'},"​",-1),u=i("<ul><li><strong>url:</strong> <code>string</code> 资源 URL</li><li><strong>file:</strong> <code>string</code> 资源文件名</li><li>返回值: <code>Promise&lt;string&gt;</code> 永久链接</li></ul><p>转存给定的资源文件，返回其对应的永久链接。</p>",2);function y(B,f,m,A,b,D){const t=r("badge");return p(),h("div",null,[d,a("h3",k,[s("ctx.assets.stats() "),e(t,{type:"warning"},{default:n(()=>[s("抽象")]),_:1}),s(),c]),g,a("h3",_,[s("assets.upload(url, file) "),e(t,{type:"warning"},{default:n(()=>[s("抽象")]),_:1}),s(),C]),u])}const P=l(o,[["render",y]]);export{x as __pageData,P as default};
